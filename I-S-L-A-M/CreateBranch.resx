<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        SH5Ls6gDAJCoXyL4Lf0SdQAAEjWN4Lc0jToAAIkqI/gtlVEHACBRZgABADLjGUAAgMzYBQwAkBnnAAIA
        5MabQAAAcuNdwAAAuTldrgIPzP8BAORheHUxKSYXV8NoAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPyshlcXk2JycTWMNgAAaTsdFK3BaVQA
        AEjZ64h/tddRAwAgXaeR/VrmAAEAUjdcrv+2JgdRBwAgUbNIfkuzqAMAkKhfIvgt/RJ14Evpj8a93njU
        jyYAfG/TCH5L06gDX8jRbvvh2j2KAgB8Z2X7V9NKGXXgy+hH/iuKc3OAAPwYzADC1zWKz1ZlFCUgJ2eH
        vd7hWTTgB+EZQPi6xvHZqoyjBGRkp/3870QTfgx2AcPXtfaYxacoAfk4i89/YQ6QH4pzAOHrWguAvSgB
        +TiMz39xGAX4MXgTCHxVloAha734/PsXID8a7wKGr8kmEMiaAMgP63S5Cjww/wdfXP88PmCOgYEcWQLm
        xzW8upgUk4urYbSBL2h5EPS5g6AhQzaBAOSpP1p0OguvgoM8OQYGACA3Z4edjoOgAQAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACBtW1v/B+LNc5OrX1qzAAAAAElFTkSuQmCC
</value>
  </data>
</root>